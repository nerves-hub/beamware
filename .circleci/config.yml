defaults: &defaults
  docker:
    - image: nerveshub/docker-build:alpine-3.8
  working_directory: ~/repo

remote_docker: &remote_docker
  setup_remote_docker:
    version: 17.09.0-ce

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      if [ -z "$CIRCLE_TAG" ]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
        SHA=$(git rev-parse --short HEAD)
        TAG=$(echo "v.$BRANCH.$SHA" | sed 's/\//_/g')
      else
        TAG=$CIRCLE_TAG
      fi
      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV

docker_build_release: &docker_build_release
  run:
    name: Build docker images
    command: |
      docker build \
        -t nerveshub/$APP_NAME:$DOCKER_TAG \
        -f apps/$APP_NAME/rel/Dockerfile.build .

docker_save: &docker_save
  run:
    name: Save docker images
    command: |
      mkdir -p /docker
      docker save \
        nerveshub/$APP_NAME:$DOCKER_TAG \
        -o /docker/$APP_NAME-$DOCKER_TAG.tar

docker_import: &docker_import
  run:
    name: Import docker images
    command: |
      docker load \
        -i /docker/$APP_NAME-$DOCKER_TAG.tar

docker_push: &docker_push
  run:
    name: Push docker images to dockerhub
    command: |
      docker login -u $DOCKER_USER -p $DOCKER_PASS
      docker push \
        nerveshub/$APP_NAME:$DOCKER_TAG

migrate: &migrate
  run:
    name: Run Migrations
    command: |
      NERVES_HUB_TASK=$(rel/scripts/ecs-update-task.sh nerves_hub_www nerveshub/nerves_hub_www:$DOCKER_TAG)
      rel/scripts/ecs-migrate.sh \
        nerves-hub \
        $NERVES_HUB_TASK

deploy: &deploy
  run:
    name: Deploy to production
    command: |
      set -euo pipefail
      rel/scripts/ecs-deploy.sh \
        nerves-hub \
        $SERVICE \
        nerveshub/$APP_NAME:$DOCKER_TAG

send_notifications: &send_notifications
  run:
    name: Send notifications
    command: |
      rel/scripts/slack-notification.sh \
        $SLACK_INCOMING_WEBHOOK_URL \
        "#nerves-hub" \
        "NervesHub Deployment" "Deployed: \`$APP_NAME:$DOCKER_TAG\`"

version: 2
jobs:
  test_elixir:
    docker:
      - image: circleci/elixir:1.8
        environment:
          MIX_ENV: test
          DATABASE_URL: postgres://db:db@localhost:5432/db
          SECRET_KEY_BASE: ${SECRET_KEY_BASE:-BGC824f8kh1IQPXK7bUmXDigrw404rA7rivR96vGv4bhMIRogiaFN7Z6R4duZClA}
          LIVE_VIEW_SIGNING_SALT: ${LIVE_VIEW_SIGNING_SALT:-2GiUN2NDLEnYT8I/3Q+XL6LGUGEKGogh}
          COVERALLS_REPO_TOKEN: Nr7FBmOwSsr0nuQT6VsK3UHaet9PWM8Sk
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: db

    working_directory: ~/app

    steps:
      - checkout
      - run: wget https://github.com/fhunleth/fwup/releases/download/v1.3.1/fwup_1.3.1_amd64.deb
      - run: sudo dpkg -i ./fwup_1.3.1_amd64.deb
      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache
          paths: "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v1-build-cache
          paths: "_build"

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Test
          command: mix coveralls.circle --umbrella

      - run:
          name: Verify formatting
          command: mix format --check-formatted

  test_javascript:
    docker:
      - image: circleci/node:8.11.3
        environment:
          SRC_PATH: "js/**/*.js"

    working_directory: ~/app/apps/nerves_hub_www/assets

    steps:
      - checkout:
          path: ~/app

      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "yarn.lock" }}

      - run: yarn install

      - save_cache:
          key: v1-node-modules-{{ checksum "yarn.lock" }}
          paths: "node_modules"

      - run:
          name: Verify formatting
          command: yarn prettier -c $SRC_PATH

      - run:
          name: ESLint
          command: yarn eslint $SRC_PATH

      - run:
          name: Test
          command: yarn jest

  build-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-www-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  build-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-device-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  build-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-api-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  push-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-www-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *docker_push

  push-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-device-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *docker_push

  push-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-api-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - <<: *docker_push

  migrate:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name migrate
      - <<: *migrate

  deploy-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-www
      - <<: *deploy
      - <<: *send_notifications

  deploy-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-device" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-device
      - <<: *deploy
      - <<: *send_notifications

  deploy-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-api" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-api
      - <<: *deploy
      - <<: *send_notifications

workflows:
  version: 2
  pipeline:
      jobs:
        - test_elixir
        - test_javascript
        - build-www:
            context: org-global
            requires:
              - test_elixir
              - test_javascript
        - build-device:
            context: org-global
            requires:
              - test_elixir
        - build-api:
            context: org-global
            requires:
              - test_elixir
        - push-www:
            context: org-global
            requires:
              - build-www
            filters:
              branches:
                only: master
        - push-device:
            context: org-global
            requires:
              - build-device
            filters:
              branches:
                only: master
        - push-api:
            context: org-global
            requires:
              - build-api
            filters:
              branches:
                only: master
        - migrate:
            context: org-global
            requires:
              - push-www
              - push-device
              - push-api
            filters:
              branches:
                only: master
        - deploy-www:
            context: org-global
            requires:
              - migrate
            filters:
              branches:
                only: master
        - deploy-device:
            context: org-global
            requires:
              - migrate
            filters:
              branches:
                only: master
        - deploy-api:
            context: org-global
            requires:
              - migrate
            filters:
              branches:
                only: master
