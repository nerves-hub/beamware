defaults: &defaults
  docker:
    - image: nerveshub/docker-build:alpine-3.9
  working_directory: ~/repo

remote_docker: &remote_docker
  setup_remote_docker:
    version: 17.09.0-ce

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      if [ -z "$CIRCLE_TAG" ]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
        SHA=$(git rev-parse --short HEAD)
        TAG=$(echo "v.$BRANCH.$SHA" | sed 's/\//_/g')
      else
        TAG=$CIRCLE_TAG
      fi
      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV

docker_build_release: &docker_build_release
  run:
    name: Build docker images
    command: |
      docker build \
        -t nerveshub/$APP_NAME:$DOCKER_TAG \
        -t nerveshub/$APP_NAME:latest \
        -f apps/$APP_NAME/rel/Dockerfile.build .

docker_save: &docker_save
  run:
    name: Save docker images
    command: |
      mkdir -p /docker
      docker save \
        nerveshub/$APP_NAME:$DOCKER_TAG \
        -o /docker/$APP_NAME-$DOCKER_TAG.tar
      docker save \
        nerveshub/$APP_NAME:latest \
        -o /docker/$APP_NAME-latest.tar

docker_import: &docker_import
  run:
    name: Import docker images
    command: |
      docker load \
        -i /docker/$APP_NAME-$DOCKER_TAG.tar
      docker load \
        -i /docker/$APP_NAME-latest.tar

migrate: &migrate
  run:
    name: Run Migrations
    command: |
      NERVES_HUB_WWW_TASK=$(rel/scripts/ecs-update-task.sh $TASK nerveshub/nerves_hub_www:$DOCKER_TAG)
      rel/scripts/ecs-migrate.sh \
        $VPC \
        $CLUSTER \
        $NERVES_HUB_WWW_TASK \
        $TASK_SG

deploy: &deploy
  run:
    name: Deploy to production
    command: |
      rel/scripts/ecs-deploy.sh \
        $CLUSTER \
        $SERVICE \
        nerveshub/$APP_NAME:$DOCKER_TAG

send_notifications: &send_notifications
  run:
    name: Send notifications
    command: |
      rel/scripts/slack-notification.sh \
        $SLACK_INCOMING_WEBHOOK_URL \
        "#nerves-hub" \
        "NervesHub Deployment" "Deployed: $CLUSTER:\`$APP_NAME:$DOCKER_TAG\`"

version: 2
jobs:
  fetch_deps:
    docker:
      - image: circleci/elixir:1.9
        environment:
          MIX_ENV: test
    working_directory: ~/app

    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix do deps.get
      - save_cache:
          key: mix-deps-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"

  test_elixir:
    docker:
      - image: circleci/elixir:1.9
        environment:
          MIX_ENV: test
          DATABASE_URL: postgres://db:db@localhost:5432/db
          SECRET_KEY_BASE: ${SECRET_KEY_BASE:-BGC824f8kh1IQPXK7bUmXDigrw404rA7rivR96vGv4bhMIRogiaFN7Z6R4duZClA}
          LIVE_VIEW_SIGNING_SALT: ${LIVE_VIEW_SIGNING_SALT:-2GiUN2NDLEnYT8I/3Q+XL6LGUGEKGogh}
          COVERALLS_REPO_TOKEN: UrUe0yTdaISMj214UUZgj0H1y79UlsTX2
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: db
    working_directory: ~/app
    steps:
      - checkout
      - run: wget https://github.com/fhunleth/fwup/releases/download/v1.3.1/fwup_1.3.1_amd64.deb
      - run: sudo dpkg -i ./fwup_1.3.1_amd64.deb
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          keys:
            - mix-deps-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix compile
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Test
          command: mix coveralls.circle --umbrella
      - run:
          name: Verify formatting
          command: mix format --check-formatted

  test_javascript:
    docker:
      - image: circleci/node:8.11.3
        environment:
          SRC_PATH: "js/**/*.js"
    working_directory: ~/app/apps/nerves_hub_www/assets
    steps:
      - checkout:
          path: ~/app
      - restore_cache:
          keys:
            - mix-deps-{{ .Branch }}-{{ checksum "../../../mix.lock" }}
      - run: yarn install
      - run:
          name: Verify formatting
          command: yarn prettier -c $SRC_PATH
      - run:
          name: ESLint
          command: yarn eslint $SRC_PATH
      - run:
          name: Test
          command: yarn jest

  build-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-www-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  build-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-device-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  build-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_save
      - save_cache:
          key: docker-api-{{ .Branch }}-{{ .Revision }}
          paths: "/docker"

  push-staging-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-www-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG

  push-production-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-www-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG
            docker push \
              nerveshub/$APP_NAME:latest

  push-staging-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-device-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG

  push-production-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-device-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG
            docker push \
              nerveshub/$APP_NAME:latest

  push-staging-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-api-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG

  push-production-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - <<: *remote_docker
      - <<: *docker_env
      - restore_cache:
          keys:
            - docker-api-{{ .Branch }}-{{ .Revision }}
      - <<: *docker_import
      - run:
          name: Push docker images to dockerhub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push \
              nerveshub/$APP_NAME:$DOCKER_TAG
            docker push \
              nerveshub/$APP_NAME:latest

  migrate-staging:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-staging-www" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-staging-web-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name migrate-production
      - <<: *migrate

  migrate-production:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_www" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-www-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name migrate-production
      - <<: *migrate

  deploy-staging-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-staging-www" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-staging-web-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-staging-www
      - <<: *deploy
      - <<: *send_notifications

  deploy-production-www:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_www" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_www" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-www-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-www" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-production-www
      - <<: *deploy
      - <<: *send_notifications

  deploy-staging-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-staging-device" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-web-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-device" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-production-device
      - <<: *deploy
      - <<: *send_notifications

  deploy-production-device:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_device" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_device" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-device-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-device" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-production-device
      - <<: *deploy
      - <<: *send_notifications

  deploy-staging-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub-staging" >> $BASH_ENV
      - run: echo "export TASK=nerves-hub-api" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-web-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-api" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-production-api
      - <<: *deploy
      - <<: *send_notifications

  deploy-production-api:
    <<: *defaults
    steps:
      - checkout
      - run: echo "export APP_NAME=nerves_hub_api" >> $BASH_ENV
      - run: echo "export VPC=nerves-hub" >> $BASH_ENV
      - run: echo "export CLUSTER=nerves-hub" >> $BASH_ENV
      - run: echo "export TASK=nerves_hub_api" >> $BASH_ENV
      - run: echo "export TASK_SG=nerves-hub-api-sg" >> $BASH_ENV
      - run: echo "export SERVICE=nerves-hub-api" >> $BASH_ENV
      - <<: *docker_env
      - run:
          name: Lock deployments
          command: rel/scripts/build-locking.sh --job-name deploy-production-api
      - <<: *deploy
      - <<: *send_notifications

workflows:
  version: 2
  pipeline:
      jobs:
        - fetch_deps
        - test_elixir:
            context: org-global
            requires:
              - fetch_deps
        - test_javascript:
            context: org-global
            requires:
              - fetch_deps
        - build-www:
            context: org-global
            requires:
              - test_elixir
              - test_javascript
        - build-device:
            context: org-global
            requires:
              - test_elixir
        - build-api:
            context: org-global
            requires:
              - test_elixir
        - approve-staging-deploy:
            type: approval
            requires:
              - build-www
              - build-api
              - build-device
        - approve-production-deploy:
            type: approval
            requires:
              - build-www
              - build-api
              - build-device
            filters:
              branches:
                only: master
        - push-staging-www:
            context: org-global
            requires:
              - approve-staging-deploy
        - push-production-www:
            context: org-global
            requires:
              - approve-production-deploy
            filters:
              branches:
                only: master
        - push-staging-device:
            context: org-global
            requires:
              - approve-staging-deploy
        - push-production-device:
            context: org-global
            requires:
              - approve-production-deploy
            filters:
              branches:
                only: master
        - push-staging-api:
            context: org-global
            requires:
              - approve-staging-deploy
        - push-production-api:
            context: org-global
            requires:
              - approve-production-deploy
            filters:
              branches:
                only: master
        - migrate-staging:
            context: org-global
            requires:
              - push-staging-www
              - push-staging-device
              - push-staging-api
        - migrate-production:
            context: org-global
            requires:
              - push-production-www
              - push-production-device
              - push-production-api
            filters:
              branches:
                only: master
        - deploy-staging-www:
            context: org-global
            requires:
              - migrate-staging
        - deploy-production-www:
            context: org-global
            requires:
              - migrate-production
            filters:
              branches:
                only: master
        - deploy-staging-device:
            context: org-global
            requires:
              - migrate-staging
        - deploy-production-device:
            context: org-global
            requires:
              - migrate-production
            filters:
              branches:
                only: master
        - deploy-staging-api:
            context: org-global
            requires:
              - migrate-staging
        - deploy-production-api:
            context: org-global
            requires:
              - migrate-production
            filters:
              branches:
                only: master
