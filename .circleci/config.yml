defaults: &defaults
  docker:
    - image: nerveshub/docker-build:latest
  working_directory: ~/repo

remote_docker: &remote_docker
  setup_remote_docker:
    version: 17.09.0-ce

docker_env: &docker_env
  run:
    name: Set docker env
    command: |
      if [ -z "$CIRCLE_TAG" ]; then
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
        SHA=$(git rev-parse --short HEAD)
        TAG=$(echo "v.$BRANCH.$SHA" | sed 's/\//_/g')
      else
        TAG=$CIRCLE_TAG
      fi
      echo "export DOCKER_TAG=$TAG" >> $BASH_ENV

docker_build_release: &docker_build_release
  run:
    name: Build docker images
    command: |
      docker build \
        -t nerveshub/nerves_hub:$DOCKER_TAG \
        -f apps/nerves_hub/rel/Dockerfile.build .
      docker build \
        -t nerveshub/nerves_hub_device:$DOCKER_TAG \
        -f apps/nerves_hub_device/rel/Dockerfile.build .

docker_push: &docker_push
  run: 
    name: Push docker images to dockerhub
    command: |
      docker login -u $DOCKER_USER -p $DOCKER_PASS
      docker push \
        nerveshub/nerves_hub:$DOCKER_TAG
      docker push \
        nerveshub/nerves_hub_device:$DOCKER_TAG

update_task: &update_task
  run: 
    name: Update ECS Tasks
    command: |
      NERVES_HUB_TASK=$(rel/scripts/ecs-update-task.sh nerves_hub nerveshub/nerves_hub:$DOCKER_TAG)
      NERVES_HUB_DEVICE_TASK=$(rel/scripts/ecs-update-task.sh nerves_hub_device nerveshub/nerves_hub_device:$DOCKER_TAG)
      echo "export NERVES_HUB_TASK=$NERVES_HUB_TASK" >> $BASH_ENV
      echo "export NERVES_HUB_DEVICE_TASK=$NERVES_HUB_DEVICE_TASK" >> $BASH_ENV

migrate: &migrate
  run:
    name: Run Migrations
    command: |
      rel/scripts/ecs-migrate.sh \
        nerves-hub \
        $NERVES_HUB_TASK

deploy: &deploy
  run:
    name: Deploy to production
    command: |
      rel/scripts/ecs-deploy.sh \
        nerves-hub \
        nerves-hub \
        $NERVES_HUB_TASK
      rel/scripts/ecs-deploy.sh \
        nerves-hub \
        nerves-hub-device \
        $NERVES_HUB_DEVICE_TASK

send_notifications: &send_notifications
  run: 
    name: Send notifications
    command: |
      rel/scripts/slack-notification.sh \
        $SLACK_INCOMING_WEBHOOK_URL \
        "#nerves-hub" \
        "NervesHub Deployment" "Deployed: \`$DOCKER_TAG\`"

version: 2
jobs:
  test:
    docker:
      - image: circleci/elixir:1.6
        environment:
          MIX_ENV: test
          DATABASE_URL: postgres://db:db@localhost:5432/db
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: db

    working_directory: ~/app

    steps:
      - checkout
      - run: wget https://github.com/fhunleth/fwup/releases/download/v1.2.0/fwup_1.2.0_amd64.deb
      - run: sudo dpkg -i ./fwup_1.2.0_amd64.deb
      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache
          paths: "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v1-build-cache
          paths: "_build"

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Test
          command: mix coveralls.circle --umbrella

      - run:
          name: Verify formatting
          command: mix format --check-formatted
  
  build:
    <<: *defaults
    steps:
      - checkout
      - <<: *remote_docker
      - <<: *docker_env
      - <<: *docker_build_release
      - <<: *docker_push
  
  deploy:
    <<: *defaults
    steps:
      - checkout
      - <<: *docker_env
      - <<: *update_task
      - <<: *migrate
      - <<: *deploy
      - <<: *send_notifications

workflows:
  version: 2
  pipeline:
      jobs:
        - test
        - build:
            context: org-global
            requires:
              - test
            filters:
              branches:
                only: master
        - deploy:
            context: org-global
            requires:
              - build
            filters:
              branches:
                only: master
