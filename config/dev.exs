use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :beamware, BeamwareWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :beamware, BeamwareWeb.Endpoint,
  url: [scheme: "http", host: "localhost", port: 4000],
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/beamware_web/views/.*(ex)$},
      ~r{lib/beamware_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Configure your database
config :beamware, Beamware.Repo,
  adapter: Ecto.Adapters.Postgres,
  url: System.get_env("DATABASE_URL"),
  ssl: false

# uncomment if using Beamware.Firmware.Upload.File
# config :beamware, firmware_upload: Beamware.Firmware.Upload.File
# uncomment out lines 19-23 in endpoint.ex and update paths accordingly
# config :beamware, Beamware.Firmware.Upload.File,
#   local_path: "/tmp/firmware",
#   public_path: "/firmware"

# if using Beamware.Firmware.Upload.S3, set configuration below accordingly
config :beamware, firmware_upload: Beamware.Firmware.Upload.S3

config :beamware, Beamware.Firmware.Upload.S3, bucket: System.get_env("S3_BUCKET_NAME")

config :ex_aws,
  s3_host: System.get_env("S3_HOST"),
  access_key_id: [{:system, "AWS_ACCESS_KEY_ID"}, :instance_role],
  secret_access_key: [{:system, "AWS_SECRET_ACCESS_KEY"}, :instance_role],
  region: System.get_env("AWS_REGION")
